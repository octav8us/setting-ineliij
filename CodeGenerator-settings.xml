<application>
  <component name="CodeGeneratorSettings">
    <option name="codeTemplates">
      <list>
        <CodeTemplate>
          <option name="name" value="Getter and Setter" />
          <option name="enabled" value="false" />
          <option name="template" value="#foreach($field in $fields)&#10;#set($name = $StringUtil.capitalizeWithJavaBeanConvention($StringUtil.sanitizeJavaIdentifier($helper.getPropertyName($field.element, $project))))&#10;#if ($field.boolean &amp;&amp; $field.primitive)&#10;#set($getter = &quot;is${name}&quot;)&#10;#else&#10;#set($getter = &quot;get${name}&quot;)&#10;#end&#10;#set($setter = &quot;set${name}&quot;)&#10;#if($field.modifierStatic)&#10;static ##&#10;#end&#10;$field.type ##&#10;${getter}() {&#10;return $field.name;&#10;}&#10;&#10;#if($field.modifierStatic)&#10;static ##&#10;#end&#10;#set($paramName = $helper.getParamName($field.element, $project))&#10;void ${setter}($field.type $paramName) {&#10;#if ($field.name == $paramName)&#10;    #if (!$field.modifierStatic)&#10;    this.##&#10;    #else&#10;        $classname.##&#10;    #end&#10;#end&#10;$field.name = $paramName;&#10;}&#10;#end" />
          <option name="pipeline">
            <list>
              <MemberSelectionConfig>
                <option name="providerTemplate" value="#set($availableMembers = [])&#10;#set($methodNames = [])&#10;#foreach($method in $class0.methods)&#10;$methodNames.add($method.methodName)&#10;#end&#10;#foreach($field in $class0.fields)&#10;#set($name = $StringUtil.capitalizeWithJavaBeanConvention($StringUtil.sanitizeJavaIdentifier($helper.getPropertyName($field.element, $project))))&#10;#if ($field.boolean &amp;&amp; $field.primitive)&#10;#set($getter = &quot;is${name}&quot;)&#10;#else&#10;#set($getter = &quot;get${name}&quot;)&#10;#end&#10;#set($setter = &quot;set${name}&quot;)&#10;#if (!$methodNames.contains($getter) || !$methodNames.contains($setter))&#10;$availableMembers.add($field)&#10;#end&#10;#end&#10;" />
                <option name="allowEmptySelection" value="false" />
                <option name="postfix" value="1" />
              </MemberSelectionConfig>
            </list>
          </option>
          <option name="classNameVm" value="$class0.name" />
          <option name="defaultTargetPackage" value="" />
          <option name="defaultTargetModule" value="" />
        </CodeTemplate>
        <CodeTemplate>
          <option name="name" value="ToString" />
          <option name="enabled" value="false" />
          <option name="template" value="public java.lang.String toString() {&#10;#if ( $members.size() &gt; 0 )&#10;#set ( $i = 0 )&#10;    return &quot;$class0.name{&quot; +&#10;#foreach( $member in $members )&#10;#if ( $i == 0 )&#10;    &quot;##&#10;#else&#10;    &quot;, ##&#10;#end&#10;#if ( $member.objectArray )&#10;#if ($java_version &lt; 5)&#10;$member.name=&quot; + ($member.accessor == null ? null : java.util.Arrays.asList($member.accessor)) +&#10;#else&#10;$member.name=&quot; + java.util.Arrays.toString($member.accessor) +&#10;#end&#10;#elseif ( $member.primitiveArray &amp;&amp; $java_version &gt;= 5)&#10;$member.name=&quot; + java.util.Arrays.toString($member.accessor) +&#10;#elseif ( $member.string )&#10;$member.name='&quot; + $member.accessor + '\'' +&#10;#else&#10;$member.name=&quot; + $member.accessor +&#10;#end&#10;#set ( $i = $i + 1 )&#10;#end&#10;    '}';&#10;#else&#10;    return &quot;$class0.name{}&quot;;&#10;#end&#10;}" />
          <option name="pipeline">
            <list>
              <MemberSelectionConfig>
                <option name="postfix" value="1" />
              </MemberSelectionConfig>
            </list>
          </option>
          <option name="classNameVm" value="$class0.name" />
          <option name="defaultTargetPackage" value="" />
          <option name="defaultTargetModule" value="" />
        </CodeTemplate>
        <CodeTemplate>
          <option name="name" value="HUESerialization" />
          <option name="template" value="## Tutorial for writing your templates&#10;##&#10;## 1. First you need to know basic syntax of velocity[1].&#10;## 2. Then it is necessary to understand the variable that CodeGenerator provides&#10;##    and its inner structure for retrieving the information you need for generating code.&#10;## 3. Learn to use the utils provided so that you can ask for further information&#10;##    or reduce your workload.&#10;##&#10;## Variables Provided (Class Mode)&#10;## -------------------------------&#10;## Class mode means you want to create new class(file), CodeGenerator let you select&#10;## `ClassNum` related classes.&#10;##&#10;## - ClassName: String     The name spcify by `ClassNameVm`&#10;## - class0: ClassEntry    The class that the action is triggered upon&#10;##   - raw: PsiClass&#10;##   - String packageName&#10;##   - importList: List&lt;String&gt;&#10;##   - fields: List&lt;FieldEntry&gt;&#10;##   - allFields: List&lt;FieldEntry&gt;&#10;##   - methods: List&lt;MethodEntry&gt;&#10;##   - allMethods: List&lt;MethodEntry&gt;&#10;##   - innerClasses: List&lt;ClassEntry&gt;&#10;##   - allInnerClasses: List&lt;ClassEntry&gt;&#10;##   - typeParamList:  List&lt;String&gt;&#10;##   - name: String&#10;##   - superName: String&#10;##   - superQualifiedName: String&#10;##   - qualifiedName: String&#10;##   - typeParams: int&#10;##   - hasSuper: boolean&#10;##   - deprecated: boolean&#10;##   - enum: boolean&#10;##   - exception: boolean&#10;##   - abstract: boolean&#10;##   - implementNames: String[]&#10;##   - isImplements(String): bool&#10;##   - isExtends(String): bool&#10;##   - matchName(String): bool&#10;##&#10;## - class1: ClassEntry    The first selected class&#10;##   ...&#10;##&#10;## - MemberEntry (FieldEntry/MethodEntry common properties)&#10;##    - raw: PsiField(for field), PsiMethod(for method)&#10;##    - name: String&#10;##    - accessor: String&#10;##    - array: boolean&#10;##    - nestedArray: boolean&#10;##    - collection: boolean&#10;##    - map: boolean&#10;##    - primitive: boolean&#10;##    - string: boolean&#10;##    - primitiveArray: boolean&#10;##    - objectArray: boolean&#10;##    - numeric: boolean&#10;##    - object: boolean&#10;##    - date: boolean&#10;##    - set: boolean&#10;##    - list: boolean&#10;##    - stringArray: boolean&#10;##    - calendar: boolean&#10;##    - typeName: String&#10;##    - typeQualifiedName: String&#10;##    - type: String&#10;##    - boolean: boolean&#10;##    - long: boolean&#10;##    - float: boolean&#10;##    - double: boolean&#10;##    - void: boolean&#10;##    - notNull: boolean&#10;##    - char: boolean&#10;##    - byte: boolean&#10;##    - short: boolean&#10;##    - modifierStatic: boolean&#10;##    - modifierPublic: boolean&#10;##    - modifierProtected: boolean&#10;##    - modifierPackageLocal: boolean&#10;##    - modifierPrivate: boolean&#10;##    - modifierFinal: boolean&#10;##&#10;## - FieldEntry&#10;##   - constant: boolean&#10;##   - modifierTransient: boolean&#10;##   - modifierVolatile: boolean&#10;##   - enum: boolean&#10;##   - matchName(String): bool&#10;##&#10;## - MethodEntry&#10;##   - methodName: String&#10;##   - fieldName: String&#10;##   - modifierAbstract: boolean&#10;##   - modifierSynchronzied: boolean&#10;##   - modifierSynchronized: boolean&#10;##   - returnTypeVoid: boolean&#10;##   - getter: boolean&#10;##   - deprecated: boolean&#10;##   - matchName(String): bool&#10;##&#10;## Variables for Body Mode&#10;## -----------------------&#10;## - class0: ClassEntry         The current class&#10;## - fields: List&lt;FieldEntry&gt;   All selected fields&#10;## - methods: List&lt;MethodEntry&gt; All selected methods&#10;## - members: List&lt;MemberEntry&gt; selected fields+methods&#10;## - class: ClassElement        For compatibility only, prefer to use class0 instead&#10;## - classname: String          For compatibility only, the class name of current class&#10;## - FQClassname: String        For compatibility only, Full Qualified Class Name&#10;##&#10;## Utilities&#10;## ---------&#10;## - java_version: int           java version&#10;## - settings: CodeStyleSettings settings of code style&#10;## - project: Project            The project instance, normally used by Psi related utilities&#10;## - helper: GenerationHelper&#10;## - StringUtil: Class&#10;## - NameUtil: Class&#10;## - PsiShortNamesCache: Class   utility to search classes&#10;## - PsiJavaPsiFacade: Class     Java specific utility to search classes&#10;## - GlobalSearchScope: Class    class to create search scopes, used by above utilities&#10;##&#10;## References&#10;## ----------&#10;## - Velocity syntax: http://velocity.apache.org/engine/1.7/user-guide.html&#10;&#10;#set($javaPsiFacade = $JavaPsiFacade.getInstance($project))&#10;#set($global = $GlobalSearchScope.allScope($project))&#10;&#10;private static final int CURR_VERSION = 0;&#10;@Override public void write(com.worksap.company.framework.serializer.wrapper.OutputSource outputSource) {&#10;    outputSource.writeInt(CURR_VERSION);&#10;#foreach( $member in $members )&#10;    #set($memberType = $member.type.split(&quot;&lt;&quot;).get(0))&#10;    #set($type = $javaPsiFacade.findClass($memberType, $global))&#10;    #if ($member.primitive)&#10;        outputSource.write${StringUtil.capitalizeWithJavaBeanConvention($memberType)}($member.name);&#10;    #elseif($member.isString())&#10;        outputSource.writeString($member.name);&#10;    #elseif($type == $null || $type.isInterface() || $type.getModifierList().hasModifierProperty(&quot;abstract&quot;) || $type.getTypeParameterList().getTextLength() &gt; 0)&#10;        outputSource.writeGenericObject($member.name);&#10;    #else&#10;        outputSource.writeConcreteObject($member.name, ${memberType}.class);&#10;    #end&#10;#end&#10;}&#10;&#10;@Override public void read(com.worksap.company.framework.serializer.wrapper.InputSource inputSource) {&#10;    int version = inputSource.readInt();&#10;    if (version == 0) {&#10;#foreach( $member in $members )&#10;    #set($memberType = $member.type.split(&quot;&lt;&quot;).get(0))&#10;    #set($type = $javaPsiFacade.findClass($memberType, $global))&#10;    #if ($member.primitive)&#10;        $member.name = inputSource.read${StringUtil.capitalizeWithJavaBeanConvention($memberType)}();&#10;    #elseif($member.isString())&#10;        $member.name = inputSource.readString();&#10;    #elseif($type == $null || $type.isInterface() || $type.getModifierList().hasModifierProperty(&quot;abstract&quot;) || $type.getTypeParameterList().getTextLength() &gt; 0)&#10;        $member.name = ($member.type)inputSource.readGenericObject();&#10;    #else&#10;        $member.name = inputSource.readConcreteObject(${memberType}.class);&#10;    #end&#10;#end&#10;    }&#10;}" />
          <option name="pipeline">
            <list>
              <MemberSelectionConfig>
                <option name="postfix" value="1" />
              </MemberSelectionConfig>
            </list>
          </option>
          <option name="classNameVm" value="$class0.name" />
          <option name="defaultTargetPackage" value="" />
          <option name="defaultTargetModule" value="" />
        </CodeTemplate>
      </list>
    </option>
  </component>
</application>